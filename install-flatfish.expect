#!/usr/bin/expect

log_user 0
set timeout -1

set env(LANGUAGE) "en_US.UTF-8"
set env(LANG) "en_US.UTF-8"
set env(LC_ALL) "en_US.UTF-8"

spawn git config --global user.name
expect eof
catch wait result

if {[lindex $result 3] != 0} {
    send_user "Please, set your global git user.name\n"
    send_user "use: git config --global user.name \"Your name\"\n"
    exit 1
}


spawn git config --global user.email
expect eof
catch wait result

if {[lindex $result 3] != 0} {
    send_user "Please, set your global git user.email\n"
    send_user "use: git config --global user.email user@email.com\n"
    exit 1
}       

send_user "Creating development folder...\n"

spawn mkdir -p $env(HOME)/flat_fish/dev
expect { eof }

cd $env(HOME)/flat_fish/dev
send_user "Downloading Autoproj bootstrap... "
spawn sh -c "rm -rf autoproj_bootstrap autoproj"
expect eof
spawn wget http://www.rock-robotics.org/master/autoproj_bootstrap
expect { 
  "*autoproj_bootstrap* saved*" { send_user "Done.\n" }
  eof { send_user "Failed!\n"; send_user "\n$expect_out(buffer)"; exit 1 }
}

stty -echo
send_user -- "Password: "
expect_user -re "(.*)\n"
send_user "\n"
stty echo
set pass $expect_out(1,string)

send_user "Running autoproj bootstrap, please wait... "
spawn ruby autoproj_bootstrap git git@github.com:Brazilian-Institute-of-Robotics/bir.flat_fish.br-buildconf.git
expect {
  "*sudo* password for*" { send "$pass\n"; exp_continue }
  "*all, none or a comma-separated list*" { send "all\n"; exp_continue }
  "*continue bootstrapping anyway*" { send "yes\n"; exp_continue }
  "*sure you want to continue*" { send "yes\n"; exp_continue }
  "*'s password:*" { send_user "Failed!\nMake sure you have added all ssh keys\n"; exit 1 }
  "*bootstrap successfully finished*" { send_user "Done.\n" }
  eof { send_user "Failed!\n"; send_user "\n$expect_out(buffer)"; exit 1 }
}

# this should not be necessary
send_user "Configuring autoproj, this may take a while... "
spawn bash -c "source ./env.sh ; autoproj reconfigure"
expect {
  "*sudo* password for*" { send "$pass\n"; exp_continue }
  "*ow should I interact with gitorious.org*" { send "ssh\n"; exp_continue }
  "*ow should I interact with github.com*" { send "ssh\n"; exp_continue }
  "*hich flavor of Rock do you want to use*" { send "master\n"; exp_continue }
  "*o you need compatibility with*" { send "no\n"; exp_continue }
  "*target operating system for*" { send "gnulinux\n"; exp_continue }
  "*hich CORBA implementation should*" { send "omniorb\n"; exp_continue }
  "*sure you want to continue*" { send "yes\n"; exp_continue }
  "*'s password:*" { send_user "Failed!\nMake sure you have added all ssh keys\n"; exit 1 }
  eof { send_user "OK!\n" }
}

# also should not be necessary
cd .autoproj/remotes/github__rock_core_rock_package_set_git/
spawn git merge autobuild/sdformat4 --no-edit
expect eof
spawn git remote add arjones git@github.com:g-arjones/rock-package_set.git
expect eof
spawn git fetch arjones
expect eof
spawn git merge arjones/aravis_0_4_0 --no-edit
expect eof
cd ../github__Brazilian_Institute_of_Robotics_bir_flat_fish_package_set_git/
spawn git merge autobuild/gazebo7 --no-edit
expect eof
cd ../github__Brazilian_Institute_of_Robotics_bir_flat_fish_br_package_set_git/
spawn git merge autobuild/urdf_1_0 --no-edit
expect eof
cd ../../..

send_user "Updating packages. Please, wait... "
spawn bash -c "source ./env.sh ; aup"
expect {
  "*sudo* password for*" { send "$pass\n"; exp_continue }
  "*ow should I interact with gitorious.org*" { send "ssh\n"; exp_continue }
  "*ow should I interact with github.com*" { send "ssh\n"; exp_continue }
  "*hich flavor of Rock do you want to use*" { send "master\n"; exp_continue }
  "*o you need compatibility with*" { send "no\n"; exp_continue }
  "*target operating system for*" { send "gnulinux\n"; exp_continue }
  "*hich CORBA implementation should*" { send "omniorb\n"; exp_continue }
  "*sure you want to continue*" { send "yes\n"; exp_continue }
  "*'s password:*" { send_user "Failed!\nMake sure you have added all ssh keys\n"; exit 1 }
  "*finished successfully*" { send_user "Success.\n" }
  eof { send_user "ERROR!\n"; send_user "\n$expect_out(buffer)"; exit 1 }
}

send_user "Building RoCK. Go have some fun and check back in a few hours... "
spawn bash -c "source ./env.sh ; amake -k"
expect {
  "*finished successfully*" { send_user "Success.\n\nRoCK is now ready for use!\n"; exit 0 }
  eof { send_user "ERROR!\n"; send_user "\n$expect_out(buffer)"; exit 1 }
}
